#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç train.py –±–µ–∑ –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import torch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from train import ASLTrainer
from data_loader import ASLDataLoader
from preprocessing import ASLPreprocessor
from augmentations import ASLAugmentations

def test_train_simple():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç train.py"""
    print("üß™ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç train.py...")
    
    try:
        # 1. –¢–µ—Å—Ç –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
        print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        augmenter = ASLAugmentations()
        test_features = torch.randn(2, 10, 468 * 3 * 3)  # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        augmented = augmenter(test_features)
        print(f"   ‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: {test_features.shape} -> {augmented.shape}")
        
        # 2. –¢–µ—Å—Ç –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
        preprocessor = ASLPreprocessor(max_len=32)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–ª–∏–Ω–∞
        test_landmarks = torch.randn(2, 20, 468, 3)
        features = preprocessor(test_landmarks)
        print(f"   ‚úÖ –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_landmarks.shape} -> {features.shape}")
        
        # 3. –¢–µ—Å—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
        trainer = ASLTrainer(
            data_dir="../data/google_asl_signs",
            model_dir="models/test",
            max_len=32,  # –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–ª–∏–Ω–∞
            batch_size=2,  # –ú–∞–ª–µ–Ω—å–∫–∏–π batch
            dim=32,  # –ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å
            lr=1e-3,
            epochs=1,  # –¢–æ–ª—å–∫–æ 1 —ç–ø–æ—Ö–∞
            use_augmentations=True,
            use_mixed_precision=True,
            gradient_clip_val=1.0,
            gradient_accumulation_steps=1  # –ë–µ–∑ accumulation –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        )
        
        print(f"   ‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(p.numel() for p in trainer.model.parameters()):,}")
        print(f"   ‚úÖ Mixed precision: {'–í–∫–ª—é—á–µ–Ω' if trainer.use_mixed_precision else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        
        # 4. –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π —ç–ø–æ—Ö–∏)
        print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –±–∞—Ç—á...")
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–∞—Ç—á
            sample_batch = next(iter(trainer.train_loader))
            features = sample_batch['features'].to(trainer.device, non_blocking=True)
            labels = sample_batch['labels'].to(trainer.device, non_blocking=True)
            
            # Forward pass
            if trainer.use_mixed_precision:
                with torch.amp.autocast('cuda'):
                    outputs = trainer.model(features)
                    loss = trainer.criterion(outputs, labels)
            else:
                outputs = trainer.model(features)
                loss = trainer.criterion(outputs, labels)
            
            print(f"   ‚úÖ Forward pass —Ä–∞–±–æ—Ç–∞–µ—Ç: Loss={loss.item():.4f}")
            print(f"   ‚úÖ Output shape: {outputs.shape}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Forward pass –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
        
        # 5. –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU
        if torch.cuda.is_available():
            print("\n5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:")
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            print(f"   ‚úÖ GPU: {gpu_name}")
            print(f"   ‚úÖ –ü–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
        
        print("\nüéâ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ train.py –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_train_simple()
    if success:
        print("\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!")
        print("python train.py")
    else:
        print("\n‚ö†Ô∏è –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è") 