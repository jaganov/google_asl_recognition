# augmentations.py
import torch
import torch.nn as nn
import numpy as np
import random
from typing import Optional, Tuple

class ASLAugmentations:
    """
    –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è Google ASL Signs dataset
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏: https://www.kaggle.com/competitions/asl-signs/discussion/406684
    """
    
    def __init__(self, 
                 temporal_prob: float = 0.5,
                 spatial_prob: float = 0.7,
                 noise_prob: float = 0.3,
                 mask_prob: float = 0.2):
        """
        Args:
            temporal_prob: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
            spatial_prob: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
            noise_prob: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞
            mask_prob: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.temporal_prob = temporal_prob
        self.spatial_prob = spatial_prob
        self.noise_prob = noise_prob
        self.mask_prob = mask_prob
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ landmark —Ç–æ—á–∫–∏ –¥–ª—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
        # Face landmarks (0-67) - –ø–µ—Ä–≤—ã–µ 68 —Ç–æ—á–µ–∫ –æ–±—ã—á–Ω–æ –ª–∏—Ü–æ
        self.face_landmarks = list(range(0, 68))
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ - —Ä—É–∫–∏ –∏ —Ç–µ–ª–æ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        self.body_landmarks = list(range(68, 468))
        
        # –í—Å–µ landmark —Ç–æ—á–∫–∏
        self.all_landmarks = list(range(0, 468))  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 468 —Ç–æ—á–µ–∫
        
        print(f"üéØ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        print(f"   Face landmarks: {len(self.face_landmarks)} —Ç–æ—á–µ–∫")
        print(f"   Body landmarks: {len(self.body_landmarks)} —Ç–æ—á–µ–∫")
        print(f"   Total landmarks: {len(self.all_landmarks)} —Ç–æ—á–µ–∫")
    
    def temporal_resample(self, x: torch.Tensor, min_factor: float = 0.8, max_factor: float = 1.2) -> torch.Tensor:
        """
        –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (temporal resampling)
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        if random.random() > self.temporal_prob:
            return x
            
        batch_size, seq_len, features = x.shape
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        factor = random.uniform(min_factor, max_factor)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã
        indices = torch.linspace(0, seq_len - 1, seq_len, device=x.device) * factor
        indices = torch.clamp(indices, 0, seq_len - 1)
        
        indices_floor = torch.floor(indices).long()
        indices_ceil = torch.ceil(indices).long()
        
        # Clamp indices
        indices_floor = torch.clamp(indices_floor, 0, seq_len - 1)
        indices_ceil = torch.clamp(indices_ceil, 0, seq_len - 1)
        
        weight = indices - indices_floor.float()
        weight = weight.unsqueeze(0).unsqueeze(-1)  # (1, seq_len, 1)
        
        x_floor = x[:, indices_floor]  # (batch, seq_len, features)
        x_ceil = x[:, indices_ceil]
        
        x_resampled = x_floor * (1 - weight) + x_ceil * weight
        
        return x_resampled
    
    def temporal_masking(self, x: torch.Tensor, max_mask_ratio: float = 0.15) -> torch.Tensor:
        """
        –í—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ (temporal masking)
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.mask_prob:
            return x
            
        batch_size, seq_len, features = x.shape
        mask_len = int(seq_len * random.uniform(0, max_mask_ratio))
        
        if mask_len > 0:
            start_idx = random.randint(0, seq_len - mask_len)
            x[:, start_idx:start_idx + mask_len] = 0
        
        return x
    
    def spatial_noise(self, x: torch.Tensor, std: float = 0.01) -> torch.Tensor:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —à—É–º–∞
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.noise_prob:
            return x
            
        noise = torch.randn_like(x) * std
        return x + noise
    
    def spatial_flip(self, x: torch.Tensor) -> torch.Tensor:
        """
        –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ (–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.spatial_prob:
            return x
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ features: [x1, y1, z1, x2, y2, z2, ...]
        x_coords = torch.arange(0, x.shape[-1], 3, device=x.device)
        x[:, :, x_coords] = -x[:, :, x_coords]
        
        return x
    
    def spatial_rotation(self, x: torch.Tensor, max_angle: float = 15.0) -> torch.Tensor:
        """
        –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XY
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.spatial_prob:
            return x
            
        angle = random.uniform(-max_angle, max_angle) * np.pi / 180
        cos_a, sin_a = np.cos(angle), np.sin(angle)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        for i in range(0, x.shape[-1], 3):  # –ö–∞–∂–¥–∞—è —Ç—Ä–æ–π–∫–∞ (x, y, z)
            if i + 1 < x.shape[-1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                x_coords = x[:, :, i:i+1]
                y_coords = x[:, :, i+1:i+2]
                
                # –í—Ä–∞—â–µ–Ω–∏–µ
                new_x = cos_a * x_coords - sin_a * y_coords
                new_y = sin_a * x_coords + cos_a * y_coords
                
                x[:, :, i:i+1] = new_x
                x[:, :, i+1:i+2] = new_y
        
        return x
    
    def spatial_scale(self, x: torch.Tensor, scale_range: Tuple[float, float] = (0.9, 1.1)) -> torch.Tensor:
        """
        –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.spatial_prob:
            return x
            
        scale = random.uniform(*scale_range)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ x, y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        for i in range(0, x.shape[-1], 3):  # –ö–∞–∂–¥–∞—è —Ç—Ä–æ–π–∫–∞ (x, y, z)
            if i + 1 < x.shape[-1]:
                x[:, :, i:i+2] *= scale
        
        return x
    
    def spatial_translation(self, x: torch.Tensor, shift_range: float = 0.1) -> torch.Tensor:
        """
        –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.spatial_prob:
            return x
            
        shift_x = random.uniform(-shift_range, shift_range)
        shift_y = random.uniform(-shift_range, shift_range)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫ x, y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        for i in range(0, x.shape[-1], 3):  # –ö–∞–∂–¥–∞—è —Ç—Ä–æ–π–∫–∞ (x, y, z)
            if i + 1 < x.shape[-1]:
                x[:, :, i:i+1] += shift_x
                x[:, :, i+1:i+2] += shift_y
        
        return x
    
    def feature_masking(self, x: torch.Tensor, max_mask_ratio: float = 0.1) -> torch.Tensor:
        """
        –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (feature masking)
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.mask_prob:
            return x
            
        feature_dim = x.shape[-1]
        mask_size = int(feature_dim * random.uniform(0, max_mask_ratio))
        
        if mask_size > 0:
            start_idx = random.randint(0, feature_dim - mask_size)
            x[:, :, start_idx:start_idx + mask_size] = 0
        
        return x
    
    def landmark_dropout(self, x: torch.Tensor, dropout_prob: float = 0.1) -> torch.Tensor:
        """
        Dropout –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö landmark —Ç–æ—á–µ–∫
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        if random.random() > self.mask_prob:
            return x
            
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è dropout
        mask = torch.bernoulli(torch.full_like(x, 1 - dropout_prob))
        return x * mask
    
    def __call__(self, x: torch.Tensor) -> torch.Tensor:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–±–µ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏
        """
        # 1. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        x = self.temporal_resample(x)
        x = self.temporal_masking(x)
        
        # 2. –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        x = self.spatial_rotation(x)
        x = self.spatial_scale(x)
        x = self.spatial_translation(x)
        x = self.spatial_flip(x)
        
        # 3. –®—É–º –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = self.spatial_noise(x)
        x = self.feature_masking(x)
        x = self.landmark_dropout(x)
        
        return x

def test_augmentations():
    """–¢–µ—Å—Ç –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: (batch_size, frames, features)
    # features = landmarks * 3 (x, y, z) + motion features
    # –ü–æ—Å–ª–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞: 468 landmarks * 3 coords * 3 (pos + vel + acc) = 4212 features
    batch_size, frames, features = 2, 50, 468 * 3 * 3  # 468 landmarks * 3 coords * 3 (pos + vel + acc)
    x = torch.randn(batch_size, frames, features)
    
    augmenter = ASLAugmentations()
    
    original_shape = x.shape
    x_aug = augmenter(x.clone())
    
    print(f"   Original shape: {original_shape}")
    print(f"   Augmented shape: {x_aug.shape}")
    print(f"   Values changed: {not torch.equal(x, x_aug)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    if x_aug.shape == x.shape:
        print(f"   Change magnitude: {torch.mean(torch.abs(x_aug - x)):.6f}")
    else:
        print(f"   Shape changed: {x.shape} -> {x_aug.shape}")
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∫–∞–¥—Ä—ã, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Ä–∞–∑–Ω—ã–µ
        min_frames = min(x.shape[1], x_aug.shape[1])
        change_mag = torch.mean(torch.abs(x_aug[:, :min_frames] - x[:, :min_frames]))
        print(f"   Change magnitude (first {min_frames} frames): {change_mag:.6f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    print("\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")
    
    # Temporal resample
    x_temp = augmenter.temporal_resample(x.clone())
    print(f"   Temporal resample: {x_temp.shape[1]} frames (–±—ã–ª–æ {x.shape[1]}) - —Ä–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {x_temp.shape[1] == x.shape[1]}")
    
    # Spatial flip
    x_flip = augmenter.spatial_flip(x.clone())
    print(f"   Spatial flip: x coords changed = {torch.any(x_flip[:, :, ::3] != x[:, :, ::3])}")
    
    # Spatial rotation
    x_rot = augmenter.spatial_rotation(x.clone())
    print(f"   Spatial rotation: changed = {torch.any(x_rot != x)}")
    
    return True

if __name__ == "__main__":
    test_augmentations()
    print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!")