#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import torch
import sys
import os
import platform

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ Triton –Ω–∞ Windows
if platform.system() == 'Windows':
    try:
        import torch._dynamo
        torch._dynamo.config.suppress_errors = True
        print("üîß –ü–æ–¥–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ Triton –¥–ª—è Windows")
    except:
        pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TensorFloat32
if torch.cuda.is_available():
    torch.set_float32_matmul_precision('high')
    print("üîß –í–∫–ª—é—á–µ–Ω TensorFloat32")

# –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
from preprocessing import ASLPreprocessor
if hasattr(ASLPreprocessor, '_landmarks_printed'):
    delattr(ASLPreprocessor, '_landmarks_printed')

from models import get_model

def test_minimal():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        print(f"\n1. –°–∏—Å—Ç–µ–º–∞: {platform.system()}")
        print(f"   ‚úÖ PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        print(f"   ‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}")
        
        if torch.cuda.is_available():
            print(f"   ‚úÖ GPU: {torch.cuda.get_device_name(0)}")
        
        # 2. –¢–µ—Å—Ç –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
        preprocessor = ASLPreprocessor(max_len=32)
        test_landmarks = torch.randn(2, 20, 468, 3)  # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        features = preprocessor(test_landmarks)
        print(f"   ‚úÖ –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_landmarks.shape} -> {features.shape}")
        
        # 3. –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å...")
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        model = get_model(
            input_dim=features.shape[-1],
            num_classes=250,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
            max_len=32,
            dim=32
        ).to(device)
        
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {sum(p.numel() for p in model.parameters()):,}")
        
        # 4. –¢–µ—Å—Ç forward pass
        print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass...")
        model.train()
        
        # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        batch_features = torch.randn(2, 20, features.shape[-1]).to(device)
        batch_labels = torch.randint(0, 250, (2,)).to(device)
        
        outputs = model(batch_features)
        criterion = torch.nn.CrossEntropyLoss()
        loss = criterion(outputs, batch_labels)
        
        print(f"   ‚úÖ Forward pass —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ Loss: {loss.item():.4f}")
        print(f"   ‚úÖ Output shape: {outputs.shape}")
        
        # 5. –¢–µ—Å—Ç backward pass
        print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º backward pass...")
        loss.backward()
        print(f"   ‚úÖ Backward pass —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_minimal()
    if success:
        print("\nüöÄ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print("python test_quick.py")
    else:
        print("\n‚ö†Ô∏è –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏") 