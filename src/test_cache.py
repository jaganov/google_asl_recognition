#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

import torch
import sys
import os
import platform
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ Triton –Ω–∞ Windows
if platform.system() == 'Windows':
    try:
        import torch._dynamo
        torch._dynamo.config.suppress_errors = True
        print("üîß –ü–æ–¥–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ Triton –¥–ª—è Windows")
    except:
        pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TensorFloat32
if torch.cuda.is_available():
    torch.set_float32_matmul_precision('high')
    print("üîß –í–∫–ª—é—á–µ–Ω TensorFloat32")

# –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
from preprocessing import ASLPreprocessor
if hasattr(ASLPreprocessor, '_landmarks_printed'):
    delattr(ASLPreprocessor, '_landmarks_printed')

from data_loader import ASLDataLoader

def test_cache_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print("\n1. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        preprocessor = ASLPreprocessor(max_len=64)
        
        # 2. –°–æ–∑–¥–∞–µ–º DataLoader
        print("\n2. –°–æ–∑–¥–∞–µ–º DataLoader...")
        dataloader = ASLDataLoader(
            data_dir="../data/google_asl_signs",
            batch_size=4,
            max_len=64,
            preprocessor=preprocessor
        )
        
        # 3. –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∞ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        print("\n3. –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∞ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)...")
        start_time = time.time()
        
        train_loader, val_loader, test_loader = dataloader.get_dataloaders(
            augment_train=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ç—á–µ–π
        for i, batch in enumerate(train_loader):
            if i >= 3:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±–∞—Ç—á–∞
                break
        
        first_load_time = time.time() - start_time
        print(f"   ‚úÖ –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {first_load_time:.2f} —Å–µ–∫")
        
        # 4. –¢–µ—Å—Ç —Å –∫—ç—à–µ–º (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
        print("\n4. –¢–µ—Å—Ç —Å –∫—ç—à–µ–º (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)...")
        start_time = time.time()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ –∂–µ –±–∞—Ç—á–∏ —Å–Ω–æ–≤–∞
        for i, batch in enumerate(train_loader):
            if i >= 3:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±–∞—Ç—á–∞
                break
        
        cached_load_time = time.time() - start_time
        print(f"   ‚úÖ –í—Ä–µ–º—è —Å –∫—ç—à–µ–º: {cached_load_time:.2f} —Å–µ–∫")
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        print("\n5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞...")
        cache_stats = preprocessor.get_cache_stats()
        print(f"   ‚úÖ Hit rate: {cache_stats['hit_rate']:.1%}")
        print(f"   ‚úÖ Cache hits: {cache_stats['cache_hits']}")
        print(f"   ‚úÖ Cache misses: {cache_stats['cache_misses']}")
        print(f"   ‚úÖ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {cache_stats['cache_size']}/{cache_stats['max_cache_size']}")
        
        # 6. –£—Å–∫–æ—Ä–µ–Ω–∏–µ
        if cached_load_time > 0:
            speedup = first_load_time / cached_load_time
            print(f"   ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        
        # 7. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        print("\n6. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...")
        preprocessor.clear_cache()
        
        cache_stats_after = preprocessor.get_cache_stats()
        print(f"   ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω: {cache_stats_after['cache_size']} —Ñ–∞–π–ª–æ–≤")
        
        print("\nüéâ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_cache_performance()
    if success:
        print("\nüöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!")
        print("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("\n‚ö†Ô∏è –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º") 