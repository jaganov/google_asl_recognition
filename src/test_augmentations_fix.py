#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
"""

import torch
from augmentations import ASLAugmentations

def test_augmentations_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size, frames, features = 2, 50, 468 * 3 * 3
    x = torch.randn(batch_size, frames, features)
    
    augmenter = ASLAugmentations()
    
    print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {x.shape}")
    
    # –¢–µ—Å—Ç temporal_resample
    x_temp = augmenter.temporal_resample(x.clone())
    print(f"   Temporal resample: {x_temp.shape} - —Ä–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {x_temp.shape == x.shape}")
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
    x_aug = augmenter(x.clone())
    print(f"   –í—Å–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {x_aug.shape} - —Ä–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {x_aug.shape == x.shape}")
    
    if x_aug.shape == x.shape:
        change_mag = torch.mean(torch.abs(x_aug - x))
        print(f"   –í–µ–ª–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {change_mag:.6f}")
        print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print(f"‚ùå –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {x.shape} -> {x_aug.shape}")
        return False

if __name__ == "__main__":
    success = test_augmentations_fix()
    if success:
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞") 