import cv2
import mediapipe as mp
import numpy as np

def test_camera():
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–∞–º–µ—Ä—ã –∏ MediaPipe
    """
    print("üé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ MediaPipe...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
    mp_holistic = mp.solutions.holistic
    mp_drawing = mp.solutions.drawing_utils
    mp_drawing_styles = mp.solutions.drawing_styles
    
    holistic = mp_holistic.Holistic(
        min_detection_confidence=0.5,
        min_tracking_confidence=0.5
    )
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å camera_id –Ω–∞ 1 –∏–ª–∏ 2")
        return False
    
    print("‚úÖ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
    print("   –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    frame_count = 0
    
    try:
        while True:  # –†–∞–±–æ—Ç–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –¥–æ –Ω–∞–∂–∞—Ç–∏—è 'q'
            ret, frame = cap.read()
            if not ret:
                print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞")
                break
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä —á–µ—Ä–µ–∑ MediaPipe
            results = holistic.process(rgb_frame)
            
            # –†–∏—Å—É–µ–º landmarks
            annotated_frame = frame.copy()
            
            # Face landmarks
            if results.face_landmarks:
                mp_drawing.draw_landmarks(
                    annotated_frame, results.face_landmarks, mp_holistic.FACEMESH_CONTOURS,
                    landmark_drawing_spec=None,
                    connection_drawing_spec=mp_drawing_styles.get_default_face_mesh_contours_style()
                )
            
            # Pose landmarks
            if results.pose_landmarks:
                mp_drawing.draw_landmarks(
                    annotated_frame, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
                    landmark_drawing_spec=mp_drawing_styles.get_default_pose_landmarks_style()
                )
            
            # Left hand landmarks
            if results.left_hand_landmarks:
                mp_drawing.draw_landmarks(
                    annotated_frame, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                    landmark_drawing_spec=mp_drawing_styles.get_default_hand_landmarks_style(),
                    connection_drawing_spec=mp_drawing_styles.get_default_hand_connections_style()
                )
            
            # Right hand landmarks
            if results.right_hand_landmarks:
                mp_drawing.draw_landmarks(
                    annotated_frame, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                    landmark_drawing_spec=mp_drawing_styles.get_default_hand_landmarks_style(),
                    connection_drawing_spec=mp_drawing_styles.get_default_hand_connections_style()
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            cv2.putText(annotated_frame, f"Frame: {frame_count}", 
                       (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            face_detected = "Face: ‚úì" if results.face_landmarks else "Face: ‚úó"
            pose_detected = "Pose: ‚úì" if results.pose_landmarks else "Pose: ‚úó"
            left_hand_detected = "Left: ‚úì" if results.left_hand_landmarks else "Left: ‚úó"
            right_hand_detected = "Right: ‚úì" if results.right_hand_landmarks else "Right: ‚úó"
            
            cv2.putText(annotated_frame, face_detected, 
                       (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(annotated_frame, pose_detected, 
                       (10, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(annotated_frame, left_hand_detected, 
                       (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(annotated_frame, right_hand_detected, 
                       (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            
            cv2.imshow('Camera Test', annotated_frame)
            
            frame_count += 1
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                print("   –í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
    
    finally:
        cap.release()
        cv2.destroyAllWindows()
    
    print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {frame_count} –∫–∞–¥—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    print("   –ï—Å–ª–∏ –≤—ã –≤–∏–¥–µ–ª–∏ landmarks –Ω–∞ –≤–∏–¥–µ–æ, –∫–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return True

if __name__ == "__main__":
    test_camera() 