#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ CUDA –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
"""

import torch
import time
import numpy as np

def debug_precision_issue():
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–û–ß–ù–û–°–¢–ò")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cuDNN
    print(f"üß† cuDNN –≤–∫–ª—é—á–µ–Ω: {torch.backends.cudnn.enabled}")
    print(f"üß† cuDNN –≤–µ—Ä—Å–∏—è: {torch.backends.cudnn.version()}")
    print(f"üß† cuDNN –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {torch.backends.cudnn.deterministic}")
    print(f"üß† cuDNN benchmark: {torch.backends.cudnn.benchmark}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
    props = torch.cuda.get_device_properties(0)
    print(f"üéÆ Compute capability: {props.major}.{props.minor}")
    print(f"üéÆ Total memory: {props.total_memory // 1024**3} GB")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Ç—Ä–∏—Ü
    print("\nüß™ –¢–ï–°–¢ –†–ê–ó–ù–´–• –†–ê–ó–ú–ï–†–û–í –ú–ê–¢–†–ò–¶:")
    
    sizes = [100, 500, 1000, 2000, 3000]
    
    for size in sizes:
        print(f"\nüìê –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: {size}x{size}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
        torch.manual_seed(42)  # –§–∏–∫—Å–∏—Ä—É–µ–º random seed
        x_cpu = torch.randn(size, size, dtype=torch.float32)
        
        torch.manual_seed(42)
        x_gpu = torch.randn(size, size, dtype=torch.float32).cuda()
        
        torch.manual_seed(42)
        y_cpu = torch.randn(size, size, dtype=torch.float32)
        
        torch.manual_seed(42)
        y_gpu = torch.randn(size, size, dtype=torch.float32).cuda()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        diff_x = torch.abs(x_cpu - x_gpu.cpu()).max().item()
        diff_y = torch.abs(y_cpu - y_gpu.cpu()).max().item()
        print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö X: {diff_x:.2e}")
        print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Y: {diff_y:.2e}")
        
        # CPU –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        start_time = time.time()
        z_cpu = torch.mm(x_cpu, y_cpu)
        cpu_time = time.time() - start_time
        
        # GPU –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        torch.cuda.synchronize()
        start_time = time.time()
        z_gpu = torch.mm(x_gpu, y_gpu)
        torch.cuda.synchronize()
        gpu_time = time.time() - start_time
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        z_gpu_cpu = z_gpu.cpu()
        diff = torch.abs(z_cpu - z_gpu_cpu).max().item()
        mean_diff = torch.abs(z_cpu - z_gpu_cpu).mean().item()
        
        speedup = cpu_time / gpu_time if gpu_time > 0 else 0
        
        print(f"   ‚è±Ô∏è  CPU –≤—Ä–µ–º—è: {cpu_time:.4f}s")
        print(f"   ‚è±Ô∏è  GPU –≤—Ä–µ–º—è: {gpu_time:.4f}s")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        print(f"   üéØ –ú–∞–∫—Å. —Ä–∞–∑–Ω–∏—Ü–∞: {diff:.2e}")
        print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞: {mean_diff:.2e}")
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if diff < 1e-3:
            print("   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: –û–¢–õ–ò–ß–ù–û")
        elif diff < 1e-1:
            print("   ‚ö†Ô∏è  –¢–æ—á–Ω–æ—Å—Ç—å: –ü–†–ò–ï–ú–õ–ï–ú–û")
        else:
            print("   ‚ùå –¢–æ—á–Ω–æ—Å—Ç—å: –ü–†–û–ë–õ–ï–ú–ê")
            
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        del x_cpu, y_cpu, z_cpu, x_gpu, y_gpu, z_gpu, z_gpu_cpu
        torch.cuda.empty_cache()

def test_mixed_precision():
    print("\nüß™ –¢–ï–°–¢ –°–ú–ï–®–ê–ù–ù–û–ô –¢–û–ß–ù–û–°–¢–ò (AMP):")
    print("="*40)
    
    size = 2000
    
    # –û–±—ã—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å float32
    x = torch.randn(size, size).cuda()
    y = torch.randn(size, size).cuda()
    
    # –¢–µ—Å—Ç –±–µ–∑ AMP
    start_time = time.time()
    z_normal = torch.mm(x, y)
    torch.cuda.synchronize()
    normal_time = time.time() - start_time
    
    # –¢–µ—Å—Ç —Å AMP
    start_time = time.time()
    with torch.amp.autocast(device_type="cuda"):
        z_amp = torch.mm(x, y)
    torch.cuda.synchronize()
    amp_time = time.time() - start_time
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    diff = torch.abs(z_normal - z_amp).max().item()
    speedup = normal_time / amp_time if amp_time > 0 else 0
    
    print(f"üñ•Ô∏è  –û–±—ã—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {normal_time:.4f}s")
    print(f"‚ö° AMP: {amp_time:.4f}s")
    print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ AMP: {speedup:.1f}x")
    print(f"üéØ –†–∞–∑–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {diff:.2e}")
    
    if diff < 1e-2:
        print("‚úÖ AMP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  AMP –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç–æ—á–Ω–æ—Å—Ç–∏")

def test_google_asl_scenario():
    print("\nüéØ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø GOOGLE ASL:")
    print("="*40)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    batch_size = 8
    frames = 16
    channels = 3
    height = width = 224
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á: {batch_size}x{frames}x{channels}x{height}x{width}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        video_batch = torch.randn(batch_size, frames, channels, height, width).cuda()
        
        # –°–∏–º—É–ª—è—Ü–∏—è ResNet backbone
        conv1 = torch.nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3).cuda()
        bn1 = torch.nn.BatchNorm2d(64).cuda()
        relu = torch.nn.ReLU().cuda()
        pool = torch.nn.MaxPool2d(3, stride=2, padding=1).cuda()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
        start_time = time.time()
        
        # Reshape –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–µ–π–º–æ–≤
        batch_frames = batch_size * frames
        reshaped = video_batch.view(batch_frames, channels, height, width)
        
        # Forward pass
        x = conv1(reshaped)
        x = bn1(x)
        x = relu(x)
        x = pool(x)
        
        # Global average pooling
        x = torch.nn.functional.adaptive_avg_pool2d(x, (1, 1))
        x = x.view(batch_size, frames, -1)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        x = x.mean(dim=1)  # –°—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        torch.cuda.synchronize()
        forward_time = time.time() - start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
        memory_used = torch.cuda.memory_allocated() // 1024**2
        memory_reserved = torch.cuda.memory_reserved() // 1024**2
        
        print(f"‚è±Ô∏è  Forward pass: {forward_time:.3f}s")
        print(f"üìä VRAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory_used} MB")
        print(f"üìä VRAM –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {memory_reserved} MB")
        print(f"üéØ –í—ã—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {x.shape}")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if forward_time < 0.1:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        elif forward_time < 0.2:
            print("‚úÖ –•–û–†–û–®–û! –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        else:
            print("‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û! –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            
        # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞
        start_time = time.time()
        dummy_loss = x.sum()
        dummy_loss.backward()
        torch.cuda.synchronize()
        backward_time = time.time() - start_time
        
        print(f"‚è±Ô∏è  Backward pass: {backward_time:.3f}s")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {forward_time + backward_time:.3f}s")
        
        # –û—á–∏—Å—Ç–∫–∞
        torch.cuda.empty_cache()
        
        return True
        
    except torch.cuda.OutOfMemoryError:
        print("‚ùå –ù–ï–•–í–ê–¢–ö–ê –ü–ê–ú–Ø–¢–ò!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ batch_size = 4")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

def main():
    print("üöÄ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CUDA –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è RTX 4070 + CUDA 12.9\n")
    
    debug_precision_issue()
    test_mixed_precision()
    success = test_google_asl_scenario()
    
    print(f"\n{'='*60}")
    print("üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    
    if success:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –¥–ª—è Google ASL –ø—Ä–æ–µ–∫—Ç–∞!")
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("‚Ä¢ Batch size: 6-8 –¥–ª—è RTX 4070")
    print("‚Ä¢ Mixed precision: –í–∫–ª—é—á–∏—Ç—å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    print("‚Ä¢ Gradient accumulation: 2-4 –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print("‚Ä¢ Frames per video: 16 –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")

if __name__ == "__main__":
    main()