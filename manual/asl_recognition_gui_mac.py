"""
GUI –≤–µ—Ä—Å–∏—è ASL Recognition –¥–ª—è macOS
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç tkinter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import queue
from pathlib import Path
import platform
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
from step5_live_recognition_mac import MacLiveASLRecognition

class ASLRecognitionGUI:
    """GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ASL –∂–µ—Å—Ç–æ–≤ –Ω–∞ macOS"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ASL Recognition for macOS")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        if platform.system() != "Darwin":
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è macOS")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.recognizer = None
        self.recognition_thread = None
        self.is_running = False
        self.message_queue = queue.Queue()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.model_path = tk.StringVar()
        self.camera_id = tk.IntVar(value=0)
        self.confidence_threshold = tk.DoubleVar(value=0.8)
        self.save_screenshots = tk.BooleanVar(value=True)
        self.use_only_face = tk.BooleanVar(value=False)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –º–æ–¥–µ–ª—å
        self.auto_find_model()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        self.process_messages()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üçé ASL Recognition –¥–ª—è macOS", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        model_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏", padding="10")
        model_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        model_frame.columnconfigure(1, weight=1)
        
        ttk.Label(model_frame, text="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:").grid(row=0, column=0, sticky=tk.W, pady=2)
        model_entry = ttk.Entry(model_frame, textvariable=self.model_path, width=50)
        model_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(5, 5), pady=2)
        ttk.Button(model_frame, text="–û–±–∑–æ—Ä...", 
                  command=self.browse_model).grid(row=0, column=2, pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
        camera_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã", padding="10")
        camera_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(camera_frame, text="ID –∫–∞–º–µ—Ä—ã:").grid(row=0, column=0, sticky=tk.W, pady=2)
        camera_spinbox = ttk.Spinbox(camera_frame, from_=0, to=10, width=10, 
                                    textvariable=self.camera_id)
        camera_spinbox.grid(row=0, column=1, sticky=tk.W, padx=(5, 0), pady=2)
        
        ttk.Label(camera_frame, text="–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:").grid(row=1, column=0, sticky=tk.W, pady=2)
        confidence_scale = ttk.Scale(camera_frame, from_=0.1, to=1.0, 
                                   variable=self.confidence_threshold, 
                                   orient=tk.HORIZONTAL, length=200)
        confidence_scale.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(5, 0), pady=2)
        confidence_label = ttk.Label(camera_frame, text="80%")
        confidence_label.grid(row=1, column=2, padx=(5, 0), pady=2)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        def update_confidence_label(*args):
            confidence_label.config(text=f"{int(self.confidence_threshold.get() * 100)}%")
        self.confidence_threshold.trace('w', update_confidence_label)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options_frame = ttk.LabelFrame(main_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        options_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Checkbutton(options_frame, text="–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã", 
                       variable=self.save_screenshots).grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏—Ü–æ", 
                       variable=self.use_only_face).grid(row=1, column=0, sticky=tk.W, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=4, column=0, columnspan=3, pady=20)
        
        self.start_button = ttk.Button(control_frame, text="üé¨ –ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", 
                                      command=self.start_recognition, style='Accent.TButton')
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.stop_recognition, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(control_frame, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", 
                  command=self.open_screenshots_folder).pack(side=tk.LEFT)
        
        # –û–±–ª–∞—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç—É—Å", padding="10")
        status_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        status_frame.columnconfigure(0, weight=1)
        status_frame.rowconfigure(1, weight=1)
        
        self.status_label = ttk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                     foreground="green", font=('Arial', 10, 'bold'))
        self.status_label.grid(row=0, column=0, sticky=tk.W)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        log_frame = ttk.Frame(status_frame)
        log_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        self.log_text = tk.Text(log_frame, height=8, wrap=tk.WORD)
        log_scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        log_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", padding="10")
        info_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E))
        
        system_info = f"–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}"
        if platform.system() == "Darwin":
            system_info += f"\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor() or 'Unknown'}"
        
        ttk.Label(info_frame, text=system_info, justify=tk.LEFT).grid(row=0, column=0, sticky=tk.W)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        main_frame.rowconfigure(5, weight=1)
    
    def auto_find_model(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å"""
        try:
            # –ü—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_paths = [
                Path("models"),
                Path("manual/models"),
                Path.cwd() / "models",
                Path.cwd() / "manual" / "models"
            ]
            
            latest_model = None
            latest_time = 0
            
            for search_path in search_paths:
                if search_path.exists():
                    for model_file in search_path.glob("*.pth"):
                        try:
                            file_time = model_file.stat().st_mtime
                            if file_time > latest_time:
                                latest_time = file_time
                                latest_model = str(model_file)
                        except Exception:
                            continue
            
            if latest_model:
                self.model_path.set(latest_model)
                self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {Path(latest_model).name}")
            else:
                self.log_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é.")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–∏: {e}")
    
    def browse_model(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏",
            filetypes=[("PyTorch –º–æ–¥–µ–ª–∏", "*.pth"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            self.model_path.set(filename)
            self.log_message(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {Path(filename).name}")
    
    def start_recognition(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            return
        
        if not self.model_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏")
            return
        
        if not Path(self.model_path.get()).exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
            self.recognizer = MacLiveASLRecognition(
                model_path=self.model_path.get(),
                camera_id=self.camera_id.get(),
                target_frames=16,
                use_only_face=self.use_only_face.get(),
                confidence_threshold=self.confidence_threshold.get(),
                save_screenshots=self.save_screenshots.get()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.is_running = True
            self.recognition_thread = threading.Thread(target=self.run_recognition, daemon=True)
            self.recognition_thread.start()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            self.update_status("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", "blue")
            self.log_message("üé¨ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:\n{e}")
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def run_recognition(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        try:
            if self.recognizer:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
                self.message_queue.put(("status", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...", "blue"))
                self.recognizer.start_recognition()
        except Exception as e:
            self.message_queue.put(("error", f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"))
        finally:
            self.message_queue.put(("finished", None))
    
    def stop_recognition(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"""
        if not self.is_running:
            return
        
        self.is_running = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "orange")
        self.log_message("‚èπ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞ OpenCV (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            import cv2
            cv2.destroyAllWindows()
        except:
            pass
    
    def open_screenshots_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
        screenshots_dir = Path.home() / "ASL_Screenshots"
        
        if not screenshots_dir.exists():
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞–ø–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ Finder (macOS)
        if platform.system() == "Darwin":
            os.system(f'open "{screenshots_dir}"')
        else:
            messagebox.showinfo("–ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º", str(screenshots_dir))
    
    def update_status(self, message, color="green"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        self.status_label.config(text=message, foreground=color)
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def process_messages(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            while True:
                try:
                    msg_type, content, *args = self.message_queue.get_nowait()
                    
                    if msg_type == "status":
                        color = args[0] if args else "blue"
                        self.update_status(content, color)
                    elif msg_type == "log":
                        self.log_message(content)
                    elif msg_type == "error":
                        self.update_status("–û—à–∏–±–∫–∞", "red")
                        self.log_message(f"‚ùå {content}")
                        messagebox.showerror("–û—à–∏–±–∫–∞", content)
                    elif msg_type == "finished":
                        self.stop_recognition()
                        
                except queue.Empty:
                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, self.process_messages)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_running:
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –≤—ã–π—Ç–∏?"):
                self.stop_recognition()
                self.root.destroy()
        else:
            self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message("üçé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASL Recognition –¥–ª—è macOS!")
        self.log_message("1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—É—é)")
        self.log_message("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        self.log_message("3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ'")
        self.log_message("4. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ 'q' –≤ –æ–∫–Ω–µ –∫–∞–º–µ—Ä—ã –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        self.root.mainloop()

if __name__ == "__main__":
    print("üçé –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ASL Recognition –¥–ª—è macOS...")
    
    try:
        app = ASLRecognitionGUI()
        app.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            import tkinter as tk
            from tkinter import messagebox
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")
        except:
            pass 